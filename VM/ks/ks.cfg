#version=RHEL8
ignoredisk --only-use=sda
autopart --type=lvm
# Partition clearing information
clearpart --none --initlabel
# Use graphical install
graphical
# Use CDROM installation media
cdrom
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Network information
network  --bootproto=dhcp --device=ens33 --onboot=off --ipv6=auto --no-activate
network  --hostname=localhost.localdomain
repo --name="AppStream" --baseurl=file:///run/install/repo/AppStream
# Root password
rootpw --iscrypted $6$eCC9JfWJxrIu67WN$yywupyUwjTmxwQUez8BMnsgFlyShJ2wduMHg0JWGbGq7/AuTjlsYW7b/NmzUFuaJ/OaQNrXMOfjOLkYuqswiZ.
# Run the Setup Agent on first boot
firstboot --enable
# Do not configure the X Window System
skipx
# System services
services --enabled="chronyd"
# System timezone
timezone America/New_York --isUtc

%packages
@^minimal-environment
kexec-tools

%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end

%post

# Keep output in a log file.
readonly LOG=/root/NASProxy-install.log
rm -f ${LOG}
echo `date` > ${LOG}

# Create the "admin" user account.  Same UID/GID as "root".
useradd -s /usr/local/bin/proxyAdmin.sh -o -u 0 -g 0 admin
echo password | passwd admin --stdin
echo "admin	ALL=(ALL)	NOPASSWD: ALL" > /etc/sudoers.d/admin

# TODO - For production builds, delete the "root" account.  Leave it intact for
#        development builds.

# Create the dummy config file.  If it already exists, then this doesn't do
# anything.
touch /etc/NASProxy.conf
chmod 777 /etc/NASProxy.conf

# Mount the OS and kickstart ISOs.  We need to access some of the stuff on
# that ISO.
echo ">>>>>>>>>>>>>>>>>>>>>>>>"                 &>> ${LOG}
echo "Create ISO mountpoints:"                  &>> ${LOG}
mkdir -p /mnt/os /mnt/ks                        &>> ${LOG}
echo "Mount the CentOS ISO:"                    &>> ${LOG}
mount /dev/sr0 /mnt/os                          &>> ${LOG}
echo "Mount the kickstart ISO:"                 &>> ${LOG}
mount /dev/sr1 /mnt/ks                          &>> ${LOG}
echo "<<<<<<<<<<<<<<<<<<<<<<<<"                 &>> ${LOG}
echo ""                                         &>> ${LOG}

# Use the OS ISO image as a local repo.
rm -f /etc/yum.repos.d/*
cp -f /mnt/os/media.repo                            /etc/yum.repos.d/media.repo
echo "enabled=1"                                 >> /etc/yum.repos.d/media.repo
echo "baseurl=file:///mnt/os/BaseOS"             >> /etc/yum.repos.d/media.repo
echo ">>>>>>>>>>>>>>>>>>>>>>>>"                 &>> ${LOG}
echo "REPO FILE CONTENTS:"                      &>> ${LOG}
cat /etc/yum.repos.d/media.repo                 &>> ${LOG}
echo "<<<<<<<<<<<<<<<<<<<<<<<<"                 &>> ${LOG}
echo ">>>>>>>>>>>>>>>>>>>>>>>>"                 &>> ${LOG}
echo "REPOLIST OUTPUT:"                         &>> ${LOG}
yum repolist                                    &>> ${LOG}
echo "<<<<<<<<<<<<<<<<<<<<<<<<"                 &>> ${LOG}
echo ""                                         &>> ${LOG}

# We need to install some packages that the proxy requires.
readonly PKG_LIST="nfs-utils nfs"
for PKG in ${PKG_LIST}; do
	echo ">>>>>>>>>>>>>>>>>>>>>>>>"         &>> ${LOG}
	echo "PKG IS >${PKG}<"                  &>> ${LOG}
	dnf install -y ${PKG}                   &>> ${LOG}
	echo "RESULT IS $?"                     &>> ${LOG}
	echo "<<<<<<<<<<<<<<<<<<<<<<<<"         &>> ${LOG}
	echo ""                                 &>> ${LOG}
done

# Start NFSD.
echo ">>>>>>>>>>>>>>>>>>>>>>>>"                 &>> ${LOG}
echo "NFS SERVER OPERATIONS:"                   &>> ${LOG}
echo "Start nfs-server:"                        &>> ${LOG}
systemctl start  nfs-server                     &>> ${LOG}
echo "Enable nfs-server:"                       &>> ${LOG}
systemctl enable nfs-server                     &>> ${LOG}
echo "Get nfs-server status:"                   &>> ${LOG}
systemctl status nfs-server                     &>> ${LOG}
echo "<<<<<<<<<<<<<<<<<<<<<<<<"                 &>> ${LOG}
echo ""                                         &>> ${LOG}

# Turn off the firewall.
#
# TODO - This is too much.  We need to just enable ports that we want to
#        use, and leave everything else locked up.
echo ">>>>>>>>>>>>>>>>>>>>>>>>"                 &>> ${LOG}
echo "FIREWALL OPERATIONS:"                     &>> ${LOG}
echo "Stop firewalld:"                          &>> ${LOG}
systemctl stop firewalld                        &>> ${LOG}
echo "Disable firewalld:"                       &>> ${LOG}
systemctl disable firewalld                     &>> ${LOG}
echo "Get firewalld status:"                    &>> ${LOG}
systemctl status firewalld                      &>> ${LOG}
echo "<<<<<<<<<<<<<<<<<<<<<<<<"                 &>> ${LOG}
echo ""                                         &>> ${LOG}

# Un-tar the tar file that contains the NAS Proxy, install it, and enable it to
# run at startup.
cd /
echo "Install NASProxy."                        &>> ${LOG}
RPMFILE=`tar -xvf /mnt/ks/nasproxy.tar`
echo "UNTAR RESULT $? : RPMFILE ${RPMFILE}"     &>> ${LOG}
dnf install -y ${RPMFILE}                       &>> ${LOG}
echo "DNF RESULT $?"                            &>> ${LOG}
systemctl enable NASProxy                       &>> ${LOG}

# TODO - Get rid of the media.repo file and re-issue "yum repolist" and
#        "yum clean all" in order to clean up.  That way the user can't
#        install or remove any packages from the NAS Proxy.

# TODO - Remove packages that we don't want.  For example:
#        1. man pages.

%end

shutdown

