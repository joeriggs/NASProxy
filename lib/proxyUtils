################################################################################
# A library of functions/macros that are used to configure proxy entries.
################################################################################

readonly PERM_NAS_PROXY_DIRS_CONF_FILE=/etc/NASProxyDirs.conf

################################################################################
# Perform common initialization that is necessary in order to use this library.
#
# Input:
#   LOG_FILE    = The name of the utility's log file.
#
#   VERBOSE     = Display console output.
#
# Output:
#   0 - Success.
#   1 - Failure.
################################################################################
proxyInitialization() {
	local LOG_FILE=${1}
	local VERBOSE=${2}

	local RETCODE=0

	return ${RETCODE}
}

################################################################################
# Bring up the specified export.  This includes the following steps:
# 1. Make sure the mount directory exists.
# 2. Mount it.
# 3. Make sure the export directory exists.
# 4. Load the bridge driver between the export directory and the mount point.
# 5. Export the export directory.
#
# Input:
#   NAS_HOST_IP
#   NAS_HOST_EXPORT
#   LOCAL_MOUNT_POINT
#   LOCAL_EXPORT_DIR
#
# Output:
#   0 - Success.
#   1 - Failure.
################################################################################
proxyUtils_LoadExport() {
	local NAS_HOST_IP=${1}
	local NAS_HOST_EXPORT=${2}
	local LOCAL_MOUNT_POINT=${3}
	local LOCAL_EXPORT_DIR=${4}

	local RETCODE=0

	# Ping the NFS Server to make sure we can reach it.
	echo    "Verify server information:"
	echo -n "  Ping server ... "
	ping -c 4 ${NAS_HOST_IP} &> ${LOG}
	if [ $? -ne 0 ]; then
		printResult ${RESULT_FAIL}
		RETCODE=1
	else
		printResult ${RESULT_PASS}
	fi

	# Check the server's exported directory.
	if [ ${RETCODE} -eq 0 ]; then
		echo -n "  Look for \"${NAS_HOST_EXPORT}\" on ${NAS_HOST_IP} ... "
		/usr/sbin/showmount -e ${NAS_HOST_IP} &> ${LOG}
		if [ $? -ne 0 ]; then
			printResult ${RESULT_FAIL}
			RETCODE=1
		else
			grep -q "^${NAS_HOST_EXPORT} " ${LOG}
			if [ $? -ne 0 ]; then
				printResult ${RESULT_FAIL} "Not found.\n"
				RETCODE=1
			else
				printResult ${RESULT_PASS}
			fi
		fi
	fi

	# Mount the user-specified remote directory onto the newly-created
	# mount point.
	if [ ${RETCODE} -eq 0 ]; then
		echo -n "  Mount ... "
		mount ${NAS_HOST_IP}:${NAS_HOST_EXPORT} ${LOCAL_MOUNT_POINT} &> ${LOG}
		if [ $? -ne 0 ]; then
			printResult ${RESULT_FAIL}
			RETCODE=1
		else
			printResult ${RESULT_PASS}
		fi
	fi

	# Insert the NAS Proxy bridge driver (a.k.a. "The Secret Sauce").
	if [ ${RETCODE} -eq 0 ]; then
		echo -n "  Start bridge ... "
		PROXY_BRIDGE_DST=${LOCAL_MOUNT_POINT} /usr/local/bin/proxy_bridge ${LOCAL_EXPORT_DIR} &> ${LOG}
		if [ $? -ne 0 ]; then
			printResult ${RESULT_FAIL}
			RETCODE=1
		else
			printResult ${RESULT_PASS}
		fi
	fi

	# Export the export dir.
	if [ ${RETCODE} -eq 0 ]; then
		echo -n "  Export ${LOCAL_EXPORT_DIR} via NFSD ... "

		# Is it already exported, for some strange reason?
		cat /proc/fs/nfs/exports | grep -qP "^${LOCAL_EXPORT_DIR}\t" &> ${LOG}
		if [ $? -eq 0 ]; then
			printResult ${RESULT_FAIL} "${LOCAL_EXPORT_DIR} is already exported.\n"
			RETCODE=1
		else
			# Export it.
			exportfs -o rw,fsid=0 *:${LOCAL_EXPORT_DIR} &> ${LOG}
			if [ $? -ne 0 ]; then
				printResult ${RESULT_FAIL}
				RETCODE=1
			else
				printResult ${RESULT_PASS}
			fi
		fi
	fi

	return ${RETCODE}
}

################################################################################
# Collect information from the user in order to create a new proxy entry.
#
# Input:
#   N/A
#
# Output:
#   0 - Success.
#   1 - Failure.
################################################################################
proxyAddEntry() {
	local RETCODE=0

	local TMP_SERVER_IP_ADDR=`getConfigValue    "SERVER_IP_ADDR"`
	local TMP_EXPORT_PATH=`getConfigValue       "EXPORT_PATH"`
	local TMP_LOCAL_MOUNT_POINT=`getConfigValue "LOCAL_MOUNT_POINT"`
	local TMP_LOCAL_EXPORT_DIR=`getConfigValue  "LOCAL_EXPORT_DIR"`

	echo ""
	echo "Add new proxy entry."
	echo ""

	read -p "  Server IP Address [${TMP_SERVER_IP_ADDR}]: "
	TMP_SERVER_IP_ADDR=${REPLY:-${TMP_SERVER_IP_ADDR}}

	read -p "  Export path [${TMP_EXPORT_PATH}]: "
	TMP_EXPORT_PATH=${REPLY:-${TMP_EXPORT_PATH}}

	read -p "  Local mount point [${TMP_LOCAL_MOUNT_POINT}]: "
	TMP_LOCAL_MOUNT_POINT=${REPLY:-${TMP_LOCAL_MOUNT_POINT}}

	read -p "  Export directory [${TMP_LOCAL_EXPORT_DIR}]: "
	TMP_LOCAL_EXPORT_DIR=${REPLY:-${TMP_LOCAL_EXPORT_DIR}}

	echo ""
	echo "Proxy path:"
	echo "  ${TMP_LOCAL_EXPORT_DIR} -> ${TMP_LOCAL_MOUNT_POINT} -> ${TMP_SERVER_IP_ADDR}:${TMP_EXPORT_PATH}"
	echo ""

	# Check the requested local mount point.
	# 1. Make sure it doesn't already exist.
	# 2. Then create it.
	echo -n "  Create mount point directory ... "
	if [ -e ${TMP_LOCAL_MOUNT_POINT} ]; then
		printResult ${RESULT_FAIL} "Already exists.\n"
		RETCODE=1
	else
		mkdir -p ${TMP_LOCAL_MOUNT_POINT} &> ${LOG}
		if [ $? -ne 0 ]; then
			printResult ${RESULT_FAIL} "Cannot create.\n"
			RETCODE=1
		else
			chmod 777 ${TMP_LOCAL_MOUNT_POINT} &> ${LOG}
			if [ $? -ne 0 ]; then
				printResult ${RESULT_FAIL} "Cannot chmod.\n"
				RETCODE=1
			else
				printResult ${RESULT_PASS}
			fi
		fi
	fi

	# Check the requested local export directory.
	# 1. Make sure it doesn't already exist.
	# 2. Then create it.
	if [ ${RETCODE} -eq 0 ]; then
		echo -n "  Create export dir ... "
		if [ -e ${TMP_LOCAL_EXPORT_DIR} ]; then
			printResult ${RESULT_FAIL} "Already exists.\n"
			RETCODE=1
		else
			mkdir -p ${TMP_LOCAL_EXPORT_DIR} &> ${LOG}
			if [ $? -ne 0 ]; then
				printResult ${RESULT_FAIL} "Cannot create.\n"
				RETCODE=1
			else
				chmod 777 ${TMP_LOCAL_EXPORT_DIR} &> ${LOG}
				if [ $? -ne 0 ]; then
					printResult ${RESULT_FAIL} "Cannot chmod.\n"
					RETCODE=1
				else
					printResult ${RESULT_PASS}
				fi
			fi
		fi
	fi

	echo ""

	if [ ${RETCODE} -eq 0 ]; then
		proxyUtils_LoadExport ${TMP_SERVER_IP_ADDR} ${TMP_EXPORT_PATH} ${TMP_LOCAL_MOUNT_POINT} ${TMP_LOCAL_EXPORT_DIR}
		RETCODE=$?
	fi

	if [ ${RETCODE} -eq 0 ]; then
		echo -n "  Save settings for the future ... "
		setConfigValue "SERVER_IP_ADDR"    ${TMP_SERVER_IP_ADDR}    ; local R1=$?
		setConfigValue "EXPORT_PATH"       ${TMP_EXPORT_PATH}       ; local R2=$?
		setConfigValue "LOCAL_MOUNT_POINT" ${TMP_LOCAL_MOUNT_POINT} ; local R3=$?
		setConfigValue "LOCAL_EXPORT_DIR"  ${TMP_LOCAL_EXPORT_DIR}  ; local R4=$?
		if [ ${R1} -eq 1 ] || [ ${R2} -eq 1 ] || [ ${R3} -eq 1 ] || [ ${R4} -eq 1 ]; then
			printResult ${RESULT_FAIL}
			RETCODE=1
		else
			printResult ${RESULT_PASS}

			echo -n "  Save record in database ... "
			echo "${TMP_LOCAL_EXPORT_DIR}|:|:|${TMP_LOCAL_MOUNT_POINT}|:|:|${TMP_SERVER_IP_ADDR}|:|:|${TMP_EXPORT_PATH}" >> ${PERM_NAS_PROXY_DIRS_CONF_FILE}
			if [ $? -ne 0 ]; then
				printResult ${RESULT_FAIL}
				RETCODE=1
			else
				printResult ${RESULT_PASS}
			fi
		fi
	fi

	echo ""

	if [ ${RETCODE} -eq 0 ]; then
		printResult ${RESULT_PASS} "Success.\n"
	else
		printResult ${RESULT_FAIL} "Failure.\n"
	fi
	read -p "Press <ENTER> to continue."

	return ${RETCODE}
}

################################################################################
# Remove an existing entry from the NAS Proxy.  The user specifies which
# directory to delete by providing the "local export directory".
#
# Input:
#   N/A
#
# Output:
#   0 - Success.
#   1 - Failure.
################################################################################
proxyRemoveEntry() {
	local RETCODE=0

	# Get the last "local export dir" that the user created.  It's probably
	# not the directory that they want to delete, but it beats nothing.
	local LOCAL_EXPORT_DIR=`getConfigValue "LOCAL_EXPORT_DIR"`

	echo ""
	echo "Remove existing proxy entry."
	echo ""

	read -p "  Local export directory [${LOCAL_EXPORT_DIR}]: "
	LOCAL_EXPORT_DIR=${REPLY:-${LOCAL_EXPORT_DIR}}

	# Locate the record in the database.
	echo -n "  Locate export directory in the database ... "
	grep "^${LOCAL_EXPORT_DIR}|:|:|" ${PERM_NAS_PROXY_DIRS_CONF_FILE} &> ${LOG}
	if [ $? -ne 0 ]; then
		printResult ${RESULT_WARN} "Not found.\n"
		RETCODE=1
	else
		printResult ${RESULT_PASS}
	fi

	# Break the record into the individual fields.
	if [ ${RETCODE} -eq 0 ]; then
		local RECORD=`tail -1 ${LOG}`

		local LOCAL_MOUNT_POINT=` echo ${RECORD} | sed -e "s/|:|:|/ /g;" | awk {'print $2'}`
		local SERVER_IP_ADDR=`    echo ${RECORD} | sed -e "s/|:|:|/ /g;" | awk {'print $3'}`
		local SERVER_EXPORT_PATH=`echo ${RECORD} | sed -e "s/|:|:|/ /g;" | awk {'print $4'}`

		echo ""
		echo "  Removing proxy path:"
		echo "    ${LOCAL_EXPORT_DIR} -> ${LOCAL_MOUNT_POINT} -> ${SERVER_IP_ADDR}:${SERVER_EXPORT_PATH}"
		echo ""
	fi

	# Clean up the local export directory.
	if [ ${RETCODE} -eq 0 ]; then
		echo -n "  Unexport and remove export dir ... "

		# Make sure the directory exists.
		if [ ! -e ${LOCAL_EXPORT_DIR} ]; then
			printResult ${RESULT_FAIL} "Doesn't exist.\n"
			RETCODE=1
		else
			# Unexport.
			exportfs -u *:${LOCAL_EXPORT_DIR} &> ${LOG}
			if [ $? -ne 0 ]; then
				printResult ${RESULT_FAIL} "Cannot unexport.\n"
				RETCODE=1
			else
				# Unmount the proxy bridge driver from the export dir.
				fusermount -u ${LOCAL_EXPORT_DIR} &> ${LOG}
				if [ $? -ne 0 ]; then
					printResult ${RESULT_FAIL} "Cannot remove proxy bridge.\n"
					RETCODE=1
				else
					# Remove export directory.
					rmdir ${LOCAL_EXPORT_DIR} &> ${LOG}
					if [ $? -ne 0 ]; then
						printResult ${RESULT_FAIL} "Cannot remove export dir.\n"
						RETCODE=1
					else
						printResult ${RESULT_PASS}
					fi
				fi
			fi
		fi
	fi

	# Clean up the mount point to the NAS.
	if [ ${RETCODE} -eq 0 ]; then
		echo -n "  Remove mount point ... "

		# Make sure the directory exists.
		if [ ! -e ${LOCAL_MOUNT_POINT} ]; then
			printResult ${RESULT_FAIL} "Doesn't exist.\n"
			RETCODE=1
		else
			# Unmount.
			umount -fl ${LOCAL_MOUNT_POINT} &> ${LOG}
			if [ $? -ne 0 ]; then
				printResult ${RESULT_FAIL} "Cannot unmount.\n"
				RETCODE=1
			else
				# Remove mount directory.
				rmdir ${LOCAL_MOUNT_POINT} &> ${LOG}
				if [ $? -ne 0 ]; then
					printResult ${RESULT_FAIL}
					RETCODE=1
				else
					printResult ${RESULT_PASS}
				fi
			fi
		fi
	fi

	echo -n "  Remove record from database ... "
	local ESC_LOCAL_EXPORT_DIR=`echo ${LOCAL_EXPORT_DIR} | sed 's,/,\\\/,g'`
	sed -i "/^${ESC_LOCAL_EXPORT_DIR}|:|:|/d" ${PERM_NAS_PROXY_DIRS_CONF_FILE}
	if [ $? -ne 0 ]; then
		printResult ${RESULT_FAIL}
		RETCODE=1
	else
		printResult ${RESULT_PASS}
	fi

	echo ""

	if [ ${RETCODE} -eq 0 ]; then
		printResult ${RESULT_PASS} "Success.\n"
	else
		printResult ${RESULT_FAIL} "Failure.\n"
	fi
	read -p "Press <ENTER> to continue."

	return ${RETCODE}
}

################################################################################
# Called at boot time.  Reload all of the exports.
#
# Input:
#   N/A
#
# Output:
#   0 - Success.
#   1 - Failure.
################################################################################
proxyReloadEntries() {
	local RETCODE=0

	echo "Reloading the exported directories:"
	echo ""

	IFS="
"

	for RECORD in `cat ${PERM_NAS_PROXY_DIRS_CONF_FILE}`; do

		# Skip comments and blank lines.
		local FIRST_CHAR=`echo ${RECORD} | head -c 1`
		if [ "${FIRST_CHAR}" = "#" ] || [ "${FIRST_CHAR}" = " " ]; then
			continue
		fi

		# Break the record into the individual fields.
		local LOCAL_EXPORT_DIR=`  echo ${RECORD} | sed -e "s/|:|:|/ /g;" | awk {'print $1'}`
		local LOCAL_MOUNT_POINT=` echo ${RECORD} | sed -e "s/|:|:|/ /g;" | awk {'print $2'}`
		local SERVER_IP_ADDR=`    echo ${RECORD} | sed -e "s/|:|:|/ /g;" | awk {'print $3'}`
		local SERVER_EXPORT_PATH=`echo ${RECORD} | sed -e "s/|:|:|/ /g;" | awk {'print $4'}`

		echo " >${LOCAL_EXPORT_DIR}< >${LOCAL_MOUNT_POINT}< >${SERVER_IP_ADDR}< >${SERVER_EXPORT_PATH}<"

		proxyUtils_LoadExport ${SERVER_IP_ADDR} ${SERVER_EXPORT_PATH} ${LOCAL_MOUNT_POINT} ${LOCAL_EXPORT_DIR}
	done

	if [ ${RETCODE} -eq 0 ]; then
		printResult ${RESULT_PASS} "Success.\n"
	else
		printResult ${RESULT_FAIL} "Failure.\n"
	fi
	return ${RETCODE}
}

