
################################################################################
# Functions that do everything necessary in order to be a member of the user's
# Domain.
################################################################################

################################################################################
################################################################################
########### Domain operations.
################################################################################
################################################################################

################################################################################
# Attempt to ping the Domain Controller.  This is a simple test to see if the
# Domain Controller is running.
#
# Input:
#   DOMAIN_CONTROLLER - From globalSettings.
#
# Output:
#   0 = success.  It is pingable.
#   1 = failure.
################################################################################
domainPingController() {
	ping -q -c 2 ${DOMAIN_CONTROLLER} &> ${LOG}
	[ $? -eq 0 ] && return 0 ; return 1
}

################################################################################
# Join the specified Domain.
#
# Input:
#   DOMAIN_CONTROLLER - From globalSettings.
#   DOMAIN_USERNAME   - From globalSettings.
#   DOMAIN_PASSWORD   - From globalSettings.
#
# Output:
#   0 = success.
#   1 = failure.
################################################################################
domainJoin() {
	local SCRIPT_FILE=`mktemp /tmp/domainJoin.XXXXX`
	[ $? -ne 0 ] && return 1

	cat > ${SCRIPT_FILE} << EOF
#!/usr/bin/expect -f
spawn /usr/sbin/realm join --verbose --user=${DOMAIN_USERNAME} ${DOMAIN_CONTROLLER}
expect "Password for Administrator:"
send "${DOMAIN_PASSWORD}\r"
expect "Successfully enrolled machine in realm"
EOF

	chmod +x ${SCRIPT_FILE}
	${SCRIPT_FILE} &> ${LOG}
	local RC=$?

	rm -f ${SCRIPT_FILE}

	[ ${RC} -eq 0 ] && return 0 ; return 1
}

################################################################################
# Leave the specified Domain.
#
# Input:
#   DOMAIN_REALM - From globalSettings.
#
# Output:
#   0 = success.
#   1 = failure.
################################################################################
domainLeave() {

	# Leave the domain.  Hopefully it just works.
	/usr/sbin/realm leave ${DOMAIN_REALM} &> ${LOG}
	[ $? -eq 0 ] && return 0

	# Maybe we don't belong to a domain.
	grep -q "Couldn't find a matching realm" ${LOG}
	[ $? -eq 0 ] && return 0

	return 1
}

################################################################################
################################################################################
########## Manage the /etc/resolv.conf file.
################################################################################
################################################################################

readonly RESOLV_CURR=/etc/resolv.conf
readonly RESOLV_BKUP=/etc/resolv.conf.original

################################################################################
# Save a backup of the /etc/resolv.conf file.
#
# Input:
#   N/A.
#
#   LOG is the name of the LOG file created by the caller.
#
# Output:
#   0 = success.
#   1 = failure;
################################################################################
domainResolvBackup() {
	# Only back it up if we haven't already done that.
	if [ ! -f ${RESOLV_BKUP} ]; then
		mv ${RESOLV_CURR} ${RESOLV_BKUP} &> ${LOG}
		[ $? -ne 0 ] && return 1
	fi

	return 0
}

################################################################################
# Create the /etc/resolv.conf so that it works with the user's domain.
#
# Input:
#   DOMAIN_REALM         - From globalSettings.
#   DOMAIN_CONTROLLER_IP - From globalSettings.
#
#   LOG is the name of the LOG file created by the caller.
#
# Output:
#   0 = success.
#   1 = failure;
################################################################################
domainResolvCreate() {
	# Strip the netmask from the Domain Controller IP Address.
	local IP=`echo ${DOMAIN_CONTROLLER_IP} | sed -e "s|\/.*||;"`
	cat > ${RESOLV_CURR} << EOF
#Generated by the NAS Proxy
search ${DOMAIN_REALM}
nameserver ${IP}
EOF
	[ $? -ne 0 ] && return 1 ; return 0
}

################################################################################
# Reset /etc/resolv.conf to the original file.
#
# Input:
#   N/A.
#
# Output:
#   0 = success.
#   1 = failure;
################################################################################
domainResolvRestore() {
	if [ -f ${RESOLV_BKUP} ]; then
		mv ${RESOLV_BKUP} ${RESOLV_CURR} &> ${LOG}
	fi
	[ $? -ne 0 ] && return 1 ; return 0
}

