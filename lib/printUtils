
################################################################################
# This file contains functions for printing result messages.
################################################################################

###############################################################################
# Display "pass", "warn", or "fail" test results.
#
# Input:
#   RESULT  - RESULT_PASS, RESULT_WARN, or RESULT_FAIL.  This determines the
#             color of the message.
#
#   MESSAGE - This is the actual message.  Note that it can be blank.  If it
#             is blank, then an appropriate message will be displayed.
#
# Output:
#   The message is displayed to stdout.
#
###############################################################################
readonly RESULT_PASS=0
readonly RESULT_WARN=1
readonly RESULT_FAIL=2

printResult() {
	local RESULT=${1}
	local MESSAGE="${2}"

	local COLOR_NORM="\033[30m" # Black
	local COLOR_PASS="\033[92m" # Green
	local COLOR_WARN="\033[35m" # Magenta
	local COLOR_FAIL="\033[31m" # Red
	readonly COLOR_PASS COLOR_WARN COLOR_FAIL

	local REVERSE="\033[7m"
	local BOLD="\033[1m"
	local REGULAR="\033[0m"
	readonly REVERSE BOLD REGULAR

	# If they didn't pass us a message, then figure out what to display.
	case ${RESULT} in
	${RESULT_PASS})
		[ -z "${MESSAGE}" ] && MESSAGE="Pass.\n"
		PRINT_COLOR="${BOLD}${COLOR_PASS}"
		;;

	${RESULT_WARN})
		[ -z "${MESSAGE}" ] && MESSAGE="Warn.\n"
		PRINT_COLOR="${BOLD}${COLOR_WARN}"
		;;

	${RESULT_FAIL})
		[ -z "${MESSAGE}" ] && MESSAGE="Fail.\n"
		PRINT_COLOR="${BOLD}${COLOR_FAIL}"
		;;

	?)
		[ -z "${MESSAGE}" ] && MESSAGE="UNKNOWN RESULT TYPE"
		PRINT_COLOR="${BOLD}${COLOR_FAIL}"
		;;

	esac

	printf "${PRINT_COLOR}${MESSAGE}${REGULAR}${COLOR_BLACK}"

	return 0
}
