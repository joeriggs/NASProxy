################################################################################
# A library of Network Adapter / IP Address utilities.  This library runs on the
# NASProxy VM.
################################################################################

IP_MODIFIED=0

################################################################################
# Test the IP address configuration by attempting to ping the specified gateway.
#
# Input:
#   The IP address is configured.
#
# Output:
#   0 - success.
#   1 - failure.
################################################################################
pingGateway() {
	local RETCODE=0

	echo -n "Loading gateway IP address ... "
	local GATEWAY=`getConfigValue "PROXY_NETWORK_IP_GATEWAY"`
	[ -z "${GATEWAY}" ] && printResult ${RESULT_FAIL} && return 1
	printResult ${RESULT_PASS} "Pass (${GATEWAY}).\n"

	echo -n "Pinging ${GATEWAY} ... "
	ping -c 4 ${GATEWAY} &> ${LOG}
	if [ $? -ne 0 ]; then
		printResult ${RESULT_FAIL}
		RETCODE=1
	else
		printResult ${RESULT_PASS}
	fi

	read -p "Press <ENTER> to continue." ; echo ""
	return ${RETCODE}
}

################################################################################
# Get new IP address information from the user.
################################################################################
ipAddrGet() {
	local IP_ADDR=`getConfigValue    "PROXY_NETWORK_IP_ADDR"`
	local IP_NETMASK=`getConfigValue "PROXY_NETWORK_IP_NETMASK"`
	local IP_GATEWAY=`getConfigValue "PROXY_NETWORK_IP_GATEWAY"`

	echo    "IP Configuration:"
	read -p "  IP Address [${IP_ADDR}]: "
	IP_ADDR_NEW=${REPLY:-${IP_ADDR}}
	read -p "  Netmask    [${IP_NETMASK}]: "
	IP_NETMASK_NEW=${REPLY:-${IP_NETMASK}}
	read -p "  Gateway    [${IP_GATEWAY}]: "
	IP_GATEWAY_NEW=${REPLY:-${IP_GATEWAY}}
	echo ""

	if [ "${IP_ADDR}"    != "${IP_ADDR_NEW}"    ] || \
	   [ "${IP_NETMASK}" != "${IP_NETMASK_NEW}" ] || \
	   [ "${IP_GATEWAY}" != "${IP_GATEWAY_NEW}" ]; then
		IP_MODIFIED=1

		setConfigValue "PROXY_NETWORK_IP_ADDR"    ${IP_ADDR_NEW}
		setConfigValue "PROXY_NETWORK_IP_NETMASK" ${IP_NETMASK_NEW}
		setConfigValue "PROXY_NETWORK_IP_GATEWAY" ${IP_GATEWAY_NEW}

		unset IP_ADDR_NEW IP_NETMASK_NEW IP_GATEWAY_NEW
	fi

	[ ${IP_MODIFIED} -eq 1 ] && ipAddrSet && IP_MODIFIED=0
}

################################################################################
# Configure the local IP address.
#
# Input:
#   The new environment variables that were specified by the user.
#
# Output:
#   0 - success.
#   1 - failure.
################################################################################
ipAddrSet() {
	local NET_IF CFG_FILE
	local NET_IF="System ens160"
	CFG_FILE=/etc/sysconfig/network-scripts/ifcfg-ens160

	local IP_ADDR=`getConfigValue    "PROXY_NETWORK_IP_ADDR"`
	local IP_NETMASK=`getConfigValue "PROXY_NETWORK_IP_NETMASK"`
	local IP_GATEWAY=`getConfigValue "PROXY_NETWORK_IP_GATEWAY"`

	local RETCODE=0

	# Convert the x.x.x.x netmask to a CIDR count (ex. 255.255.255.0 to /24).
	echo -n "Convert netmask to CIDR ... "
	NETMASK_CIDR=`ipcalc -p 1.1.1.1 ${IP_NETMASK} | sed -n 's/^PREFIX=\(.*\)/\/\1/p'`
	if [ $? -ne 0 ]; then
		printResult ${RESULT_FAIL}
		RETCODE=1
	else
		printResult ${RESULT_PASS} "Pass (${NETMASK_CIDR}).\n"
	fi

	if [ ${RETCODE} -eq 0 ]; then
		echo -n "Set IP address and netmask ... "
		nmcli con mod "${NET_IF}" ipv4.address ${IP_ADDR}${NETMASK_CIDR} &> ${LOG}
		if [ $? -ne 0 ]; then
			printResult ${RESULT_FAIL}
			RETCODE=1
		else
			printResult ${RESULT_PASS}
		fi
	fi

	if [ ${RETCODE} -eq 0 ]; then
		echo -n "Set gateway ... "
		nmcli con mod "${NET_IF}" ipv4.gateway ${IP_GATEWAY} &> ${LOG}
		if [ $? -ne 0 ]; then
			printResult ${RESULT_FAIL}
			RETCODE=1
		else
			printResult ${RESULT_PASS}
		fi
	fi

	if [ ${RETCODE} -eq 0 ]; then
		echo -n "Set autoconnect ... "
		nmcli con mod "${NET_IF}" autoconnect yes &> ${LOG}
		if [ $? -ne 0 ]; then
			printResult ${RESULT_FAIL}
			RETCODE=1
		else
			printResult ${RESULT_PASS}
		fi
	fi

	if [ ${RETCODE} -eq 0 ]; then
		echo -n "Set \"static\" ... "
		sudo sed -i -e "s/BOOTPROTO=.*/BOOTPROTO=static/;" ${CFG_FILE} &> ${LOG}
		if [ $? -ne 0 ]; then
			printResult ${RESULT_FAIL}
			RETCODE=1
		else
			printResult ${RESULT_PASS}
		fi
	fi

	if [ ${RETCODE} -eq 0 ]; then
		echo -n "Down ... "
		nmcli con down "${NET_IF}" &> ${LOG}
		if [ $? -ne 0 ]; then
			printResult ${RESULT_FAIL}
			RETCODE=1
		else
			printResult ${RESULT_PASS}
		fi
	fi

	if [ ${RETCODE} -eq 0 ]; then
		echo -n "Up ... "
		nmcli con up "${NET_IF}" &> ${LOG}
		if [ $? -ne 0 ]; then
			printResult ${RESULT_FAIL}
			RETCODE=1
		else
			printResult ${RESULT_PASS}
		fi
	fi

	read -p "Press <ENTER> to continue." ; echo ""
	return ${RETCODE}
}
