
################################################################################
# Utility functions that are useful when building and deploying the NAS Proxy.
################################################################################

readonly BUILD_CONF_FILE=${TOP_DIR}/.buildrc

################################################################################
# Initialize this library.  Anything that needs to be done for every build can
# be done here.
#
# Input:
#   INDENT - The number of spaces to place at the beginning of each console
#            message.  This allows this function to keep its console messages
#            in line with the rest of the build tools.
#
# Output:
#   0 - success.
#   1 - failure.
################################################################################
buildUtilsInit() {
	local INDENT=${1}

	local SPACER=`printf "%${INDENT}s" ""`

	# Make sure the user has "sudo" capability.
	printf "%sTest \"sudo\" access ... " "${SPACER}"
	sudo -n ls -l /root &> ${LOG}
	[ $? -ne 0 ] && printResult ${RESULT_FAIL} "Fail (\"`whoami`\" requires \"sudo\" access).\n" && return 1

	grep -q "sudo: a password is required" ${LOG}
	[ $? -eq 0 ] && printResult ${RESULT_FAIL} && return 1

	printResult ${RESULT_PASS}

	return 0
}

################################################################################
# This is a handler that runs when the build and configure scripts end.  It
# prints a message that lets the user know whether the operation passed or
# failed.
#
# Input:
#   LINUX_RC - This is the return code from the overall build or configure.
#
#   RC       - A code that lets the function know which type of signal caused
#              the build or configure script to terminate.
#
# Output:
#   Calls "exit" with the proper exit code.
################################################################################
IS_CLEANED=0
cleanup() {
	local LINUX_RC=$?
	local RC=${1}

	[ ${IS_CLEANED} -ne 0 ] && return
	IS_CLEANED=1

	local TS_END=`date +%s`
	local SECONDS=$(( TS_END - TS_BEG ))
	local ELAPSED_HRS=$(( SECONDS / 3600 ))
	SECONDS=$(( SECONDS - ELAPSED_HRS * 3600 ))
	local ELAPSED_MIN=$(( SECONDS / 60 ))
	SECONDS=$(( SECONDS - ELAPSED_MIN * 60 ))

	# Done.  Success.
	local ELAPSED_TIME_STR="`printf \"%02d hours : %02d minutes : %02d seconds\" ${ELAPSED_HRS} ${ELAPSED_MIN} ${SECONDS}`"
	echo ""
	if [ ${RC} -eq 0 ]; then
		if [ ${LINUX_RC} -eq 0 ]; then
			printResult ${RESULT_PASS} "Success (${ELAPSED_TIME_STR}).\n"
		else
			printResult ${RESULT_FAIL} "Failure (${LINUX_RC}) (${ELAPSED_TIME_STR}).\n"
		fi
	else
		printResult ${RESULT_FAIL} "Failure (${ELAPSED_TIME_STR}).\n"
	fi
	echo ""
	exit ${RC}
}
trap "cleanup 0" EXIT
trap "cleanup 1" SIGHUP
trap "cleanup 2" SIGQUIT
trap "cleanup 3" SIGINT

# We'll display the elapsed time at the end.
TS_BEG=`date +%s`

################################################################################
# Check for the specified CentOS package.  If it's not installed, install it.
#
# Input:
#   PKG_NAME is the name of the package (in YUM).
#
# Output:
#   Returns if success.
#
#   Prints an error message and exits if failure.
################################################################################
installYUMPackage() {
	local PKG_NAME=${1}

	echo -n "    Check for ${PKG_NAME} ... "
	sudo yum --enablerepo=PowerTools list installed ${PKG_NAME} &> ${LOG}
	if [ $? -eq 0 ]; then
		printResult ${RESULT_PASS}
	else
		printResult ${RESULT_WARN} "Missing.\n"

		echo -n "      Install ... "
		sudo yum --enablerepo=PowerTools install -y ${PKG_NAME} &> ${LOG}
		[ $? -ne 0 ] && printResult ${RESULT_FAIL} && exit 1 ; printResult ${RESULT_PASS}
	fi
}

################################################################################
# Load the existing build configuration.  This function knows which build
# environment variables should get loaded.  So it can look through and make sure
# they all loaded.  If anything is missing, this function will ask the user for
# a value.
#
# Input:
#   INDENT - The number of spaces to place at the beginning of each console
#            message.  This allows this function to keep its console messages
#            in line with the rest of the build tools.
#
# Output:
#   Success - Returns to the caller.
#   Failure - Automatically exits the entire shell script.
################################################################################
loadBuildConfigFile() {
	local INDENT=${1}

	local SPACER=`printf "%${INDENT}s" ""`

	printf "%sPrepare config file (${BUILD_CONF_FILE}):\n" "${SPACER}"
	printf "%s  Look for config file (${BUILD_CONF_FILE}) ... " "${SPACER}"
	if [ -f ${BUILD_CONF_FILE} ]; then
		printResult ${RESULT_PASS} "Found.\n"
		. ${BUILD_CONF_FILE}
	else
		printResult ${RESULT_WARN} "Missing.\n"
		printf "%s    Create empty config file ... " "${SPACER}"
		touch ${BUILD_CONF_FILE}
		[ $? -ne 0 ] && printResult ${RESULT_FAIL} && exit 1 ; printResult ${RESULT_PASS}
	fi

	# Make sure everything is defined.
	WRITE_FILE=0

	# ESXi server.
	if [ -z "${ESXI_IP}" ] || [ -z "${ESXI_USERNAME}" ] || [ -z "${ESXI_PASSWORD}" ]; then
		read    -p "${SPACER}    ESXi server IP Address: [${ESXI_IP}] "
		ESXI_IP=${REPLY}
		read    -p "${SPACER}    ESXi server username:   [${ESXI_USERNAME}] "
		ESXI_USERNAME=${REPLY}
		read -s -p "${SPACER}    ESXi server password:   [${ESXI_PASSWORD}] "
		ESXI_PASSWORD=${REPLY}
		WRITE_FILE=1
		echo ""
	fi

	# If the user changed anything, write it back out.
	if [ ${WRITE_FILE} -eq 1 ]; then
		printf "%s    Saving the build configuration file ... " "${SPACER}"
		echo "export ESXI_IP=${ESXI_IP}"              > ${BUILD_CONF_FILE}
		[ $? -ne 0 ] && printResult ${RESULT_FAIL} && exit 1
		echo "export ESXI_USERNAME=${ESXI_USERNAME}" >> ${BUILD_CONF_FILE}
		[ $? -ne 0 ] && printResult ${RESULT_FAIL} && exit 1
		echo "export ESXI_PASSWORD=${ESXI_PASSWORD}" >> ${BUILD_CONF_FILE}
		[ $? -ne 0 ] && printResult ${RESULT_FAIL} && exit 1
		printResult ${RESULT_PASS}
	fi
}

