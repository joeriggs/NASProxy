################################################################################
# Utility functions that are useful when building the NAS Proxy.
################################################################################

readonly BUILD_CONF_FILE=${TOP_DIR}/build.conf

################################################################################
# Initialize this library.  Anything that needs to be done for every build can
# be done here.
#
# Input:
#   INDENT - The number of spaces to place at the beginning of each console
#            message.  This allows this function to keep its console messages
#            in line with the rest of the build tools.
#
# Output:
#   0 - success.
#   1 - failure.
################################################################################
buildUtilsInit() {
	local INDENT=${1}

	local SPACER=`printf "%${INDENT}s" ""`

	# Make sure the user has "sudo" capability.
	printf "%sTest \"sudo\" access ... " "${SPACER}"
	sudo -n ls -l /root &> ${LOG}
	[ $? -ne 0 ] && printResult ${RESULT_FAIL} "Fail (\"`whoami`\" requires \"sudo\" access).\n" && return 1

	grep -q "sudo: a password is required" ${LOG}
	[ $? -eq 0 ] && printResult ${RESULT_FAIL} && return 1

	printResult ${RESULT_PASS}

	return 0
}

################################################################################
# Check for the specified CentOS package.  If it's not installed, install it.
#
# Input:
#   PKG_NAME is the name of the package (in YUM).
#
# Output:
#   Returns if success.
#
#   Prints an error message and exits if failure.
################################################################################
installYUMPackage() {
	local PKG_NAME=${1}

	# We enable certain repositories for the RHEL releases.
	if [ ${LOCAL_OS_IS_RHEL} -eq 1 ]; then
		if [ ${RHEL_MAJOR_VERSION} -eq 7 ]; then
			[ "${PKG_NAME}" != "epel-release" ] && REPOLIST="--enablerepo=epel"
		else
			REPOLIST="--enablerepo=PowerTools"
		fi
	fi

	echo -n "    Check for ${PKG_NAME} ... "
	sudo yum ${REPOLIST} list installed ${PKG_NAME} &> ${LOG}
	if [ $? -eq 0 ]; then
		printResult ${RESULT_PASS}
	else
		printResult ${RESULT_WARN} "Missing.\n"

		echo -n "      Install ... "
		sudo yum ${REPOLIST} install -y ${PKG_NAME} &> ${LOG}
		[ $? -ne 0 ] && printResult ${RESULT_FAIL} && exit 1 ; printResult ${RESULT_PASS}
	fi
}

################################################################################
# Write a brand new copy of the config file.
#
# Input:
#   All of the variables are set to their requested values.
#
# Output:
#   0 = success.
#   1 = failure.
################################################################################
writeBuildConfigFile() {
	echo -n "Saving the build configuration file ... "

	cat > ${BUILD_CONF_FILE} << EOF
export ESXI_IP=${ESXI_IP}
export ESXI_USERNAME=${ESXI_USERNAME}
export ESXI_PASSWORD=${ESXI_PASSWORD}
EOF

	[ $? -ne 0 ] && printResult ${RESULT_FAIL} ; printResult ${RESULT_PASS}
	read -p "Press <ENTER> to continue."
}

################################################################################
# Load the existing build configuration.  This function knows which build
# environment variables should get loaded.  So it can look through and make sure
# they all loaded.  If anything is missing, this function will ask the user for
# a value.
#
# Input:
#   INDENT - The number of spaces to place at the beginning of each console
#            message.  This allows this function to keep its console messages
#            in line with the rest of the build tools.
#
# Output:
#   Success - Returns to the caller.
#   Failure - Automatically exits the entire shell script.
################################################################################
loadBuildConfigFile() {
	local INDENT=${1}

	local SPACER=`printf "%${INDENT}s" ""`

	printf "%sPrepare config file (${BUILD_CONF_FILE}):\n" "${SPACER}"
	printf "%s  Look for config file (${BUILD_CONF_FILE}) ... " "${SPACER}"
	if [ -f ${BUILD_CONF_FILE} ]; then
		echo "Found."
		. ${BUILD_CONF_FILE}
	else
		echo "Missing."
		printf "%s    Create empty config file ... " "${SPACER}"
		touch ${BUILD_CONF_FILE}
		[ $? -ne 0 ] && echo "Fail." && exit 1 ; echo "Pass."
	fi

	# Make sure everything is defined.
	WRITE_FILE=0

	# ESXi server.
	if [ -z "${ESXI_IP}" ] || [ -z "${ESXI_USERNAME}" ] || [ -z "${ESXI_PASSWORD}" ]; then
		read    -p "${SPACER}    ESXi server IP Address: [${ESXI_IP}] "
		ESXI_IP=${REPLY}
		read    -p "${SPACER}    ESXi server username:   [${ESXI_USERNAME}] "
		ESXI_USERNAME=${REPLY}
		read -s -p "${SPACER}    ESXi server password:   [${ESXI_PASSWORD}] "
		ESXI_PASSWORD=${REPLY}
		WRITE_FILE=1
		echo ""
	fi

	# If the user changed anything, write it back out.
	[ ${WRITE_FILE} -eq 1 ] && writeBuildConfigFile
}

