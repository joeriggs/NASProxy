
################################################################################
# Common macros and functions used by the scripts that run on the production VM.
################################################################################

readonly PERM_NAS_PROXY_CONF_FILE=/usr/local/etc/NASProxy.conf
readonly TEMP_NAS_PROXY_CONF_FILE=/usr/local/etc/NASProxy.conf.tmp

################################################################################
# Perform common initialization.  This includes making a copy of the conf file.
#
# Input:
#   LOG_FILE    = The name of the utility's log file.
#
#   VERBOSE     = Display console output.
#
# Output:
#   Success - Returns to the caller.
#
#   Failure - Automatically exits the entire shell script.
################################################################################
commonInitialization() {
	local LOG_FILE=${1}
	local VERBOSE=${2}

	local PROXY_LIB_DIR=/usr/local/lib

	# Load our print library.
	[ ${VERBOSE} -eq 1 ] && echo -n "  Loading Print utilities library ... "
	PRINT_UTILS_FILE=${PROXY_LIB_DIR}/printUtils
	[ ! -f ${PRINT_UTILS_FILE} ] && echo "File not found." && exit 1
	. ${PRINT_UTILS_FILE}
	[ $? -ne 0 ] && echo "Fail." && exit 1
	[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_PASS}

	# Load the RHEL Version library.
	[ ${VERBOSE} -eq 1 ] && echo -n "  Loading RHEL version library ... "
	RHEL_VERSION_FILE=${PROXY_LIB_DIR}/rhelVersion
	[ ! -f ${RHEL_VERSION_FILE} ] && echo "File not found." && exit 1
	. ${RHEL_VERSION_FILE}
	[ $? -ne 0 ] && echo "Fail." && exit 1
	[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_PASS}

	# Load our network/IPAddr utilities.
	[ ${VERBOSE} -eq 1 ] && echo -n "  Loading IP Address library ... "
	IP_ADDR_UTILS_FILE=${PROXY_LIB_DIR}/ipUtils
	[ ! -f ${IP_ADDR_UTILS_FILE} ] && echo "File not found." && exit 1
	. ${IP_ADDR_UTILS_FILE}
	[ $? -ne 0 ] && echo "Fail." && exit 1
	[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_PASS}

	# Load our proxy utilities.
	[ ${VERBOSE} -eq 1 ] && echo -n "  Loading IP Address library ... "
	PROXY_UTILS_FILE=${PROXY_LIB_DIR}/proxyUtils
	[ ! -f ${PROXY_UTILS_FILE} ] && echo "File not found." && exit 1
	. ${PROXY_UTILS_FILE}
	[ $? -ne 0 ] && echo "Fail." && exit 1
	[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_PASS}

	# Make sure we're running as root.
	[ ${VERBOSE} -eq 1 ] && echo -n "  Make sure running as root ... "
	USERNAME=`whoami`
	[ "${USERNAME}" != "root" ] && printResult ${RESULT_FAIL} "Incorrect username (${USERNAME}).\n" && exit 1
	[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_PASS}

	# Load our conf file.
	[ ${VERBOSE} -eq 1 ] && echo -n "  Loading config from ${PERM_NAS_PROXY_CONF_FILE} ... "
	if [ -f "${PERM_NAS_PROXY_CONF_FILE}" ]; then
		. ${PERM_NAS_PROXY_CONF_FILE}
		if [ $? -ne 0 ]; then
			[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_FAIL} 
		else
			[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_PASS} "Done.\n"
		fi

		# Save a copy in a tmp file.  As we make changes we'll make them
		# in the tmp file.  Then if the user wants to save their
		# changes, we just move the tmp file to the perm file.
		[ ${VERBOSE} -eq 1 ] && echo -n "  Make a copy of the config file ... "
		cp -f ${PERM_NAS_PROXY_CONF_FILE} ${TEMP_NAS_PROXY_CONF_FILE} &> ${LOG}
		if [ $? -ne 0 ]; then
			[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_FAIL} 
		else
			[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_PASS} 
		fi

	else
		[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_WARN} "Missing.\n"
	fi

	# Init our log file.
	[ ${VERBOSE} -eq 1 ] && echo -n "  Init log file (${LOG_FILE}) ... "
	rm -f ${LOG_FILE} &> /dev/null
	[ $? -ne 0 ] && printResult ${RESULT_FAIL} && exit 1
	[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_PASS}
}

################################################################################
# Allow the user to change the admin password.
#
# Input:
#   N/A
#
# Output:
#   0 - Success.
#   1 - Failure.
################################################################################
changePassword() {
	local RETCODE=1

	echo ""
	echo "Change password."
	echo ""

	read -s -p "  New password: "
	local NEW_PASSWORD_1=${REPLY}

	echo ""

	read -s -p "  Enter again: "
	local NEW_PASSWORD_2=${REPLY}

	echo ""
	echo ""

	if [ ! -z "${NEW_PASSWORD_1}" ]; then
		if [ "${NEW_PASSWORD_1}" = "${NEW_PASSWORD_2}" ]; then
			echo -n "Setting admin password ... "
			echo ${NEW_PASSWORD_1} | passwd admin --stdin &> ${LOG}
			if [ $? -ne 0 ]; then
				printResult ${RESULT_FAIL}
			else
				printResult ${RESULT_PASS}
				RETCODE=0
			fi
		else
			printResult ${RESULT_FAIL} "Passwords don't match.\n"
		fi
	fi

	echo ""

	return ${RETCODE}
}

################################################################################
# Get and return a configuration variable.
#
# Input:
#   KEY - The name of the configuration variable.
#
# Output:
#   Returns the variable.  If the variable doesn't exist, it returns an empty
#   string.
################################################################################
getConfigValue() {
	local KEY=${1}

	local VALUE=""

	grep "^${KEY}=" ${TEMP_NAS_PROXY_CONF_FILE} &> ${LOG}
	if [ $? -eq 0 ]; then
		VALUE=`cat ${LOG} | sed -e "s/^${KEY}=//;"`
	fi

	echo "${VALUE}"
}

################################################################################
# Save a new configuration variable.
#
# Input:
#   KEY - The name of the configuration variable.
#
#   VALUE - The value to set it to (KEY=VALUE).
#
# Output:
#   0 - Success.  It is saved in the tmp file.
#   1 - Failure.  Unknown status.
################################################################################
setConfigValue() {
	local KEY="${1}"
	local VALUE="${2}"

	local RETCODE=1
	local VERBOSE=0

	[ ${VERBOSE} -eq 1 ] && echo -n "Look for existing KEY=VALUE ... "
	grep "^${KEY}=" ${TEMP_NAS_PROXY_CONF_FILE} &> ${LOG}
	if [ $? -ne 0 ]; then
		[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_WARN} "Missing.\n"

		[ ${VERBOSE} -eq 1 ] && echo -n "  Create new variable ... "
		echo "${KEY}=${VALUE}" >> ${TEMP_NAS_PROXY_CONF_FILE}
		if [ $? -ne 0 ]; then
			[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_FAIL}
		else
			[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_PASS}
		fi
	else
		[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_PASS}

		[ ${VERBOSE} -eq 1 ] && echo -n "  Set to new value ... "
		sed -ie "s|^${KEY}=.*|${KEY}=${VALUE}|;" ${TEMP_NAS_PROXY_CONF_FILE} &> ${LOG}
		if [ $? -ne 0 ]; then
			[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_FAIL}
		else
			[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_PASS} "Pass (${VALUE}).\n"
			RETCODE=0
		fi
	fi

	return ${RETCODE}
}

################################################################################
# We've (possibly) been making changes to our configuration data.  Save it.
#
# Input:
#   There is a "tmp" copy of our configuration file that contains all of the
#   current configuration settings.
#
# Output:
#   Success - The configuration file is updated.
#
#   Failure - Unknown.
################################################################################
saveConfigFile() {
	echo "" ; echo -n "Saving configuration ... "
	cp -f ${TEMP_NAS_PROXY_CONF_FILE} ${PERM_NAS_PROXY_CONF_FILE} &> ${LOG}
	if [ $? -ne 0 ]; then
		printResult ${RESULT_FAIL}
	else
		printResult ${RESULT_PASS}
	fi

	echo ""
	read -p "Press <ENTER> to continue."
}

